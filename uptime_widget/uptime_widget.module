<?php

/**
 * @file
 * A configurable module defined block.
 */
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_menu().
 */
function uptime_widget_menu() {
  $items['admin/config/system/uptime_widget'] = array(
    'title' => 'Uptime',
    'description' => 'UptimeRobot.com API key and monitor ID settings.',
    'route_name' => 'uptime_widget_settings',
    'access arguments' => array('administer site configuration'),
    'weight' => 100,
  );

  return $items;
}

/**
 * Implements hook_cron().
 *
 * Called every time the Drupal cron runs. Grabs the all-time uptime ratio from
 * UptimeRobot.com to store in the variable 'ratio' till next cron run.
 */
function uptime_widget_cron() {
  $config = \Drupal::config('config.admin_config_uptime_widget');

  $interval = $config->get('interval');
  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.
  if (time() >= $config->get('next_execution')) {
    $api_key = $config->get('api_key');
    $monitor_id = $config->get('monitor_id');
    // Pause or activate update monitoring depending on the 'enabled' checkbox.
    $status = $config->get('enabled');
    $url_status = "http://api.uptimerobot.com/editMonitor?apiKey=" . $api_key . "&monitorID=" . $monitor_id . "&monitorStatus=" . $status . "&format=xml";
    // Create a new cURL resource.
    $ch = curl_init();
    // Set URL and other appropriate options.
    curl_setopt($ch, CURLOPT_URL, $url_status);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    // Grab URL and pass it to the browser.
    curl_exec($ch);
    // Close cURL resource, and free up system resources.
    curl_close($ch);

    // Refresh the uptime ratio.
    $api_key = $config->get('api_key');
    if (empty($api_key)) {
      \Drupal::configFactory()->getEditable('config.admin_config_uptime_widget')
          ->set('ratio', '[Missing API key] ')
          ->save();
    }
    else {
      $monitor_id = $config->get('monitor_id');
      $url = "http://api.uptimerobot.com/getMonitors?apiKey=" . $api_key . "&monitors=" . $monitor_id . "&format=xml";
      // Curl request.
      $c = curl_init($url);
      curl_setopt($c, CURLOPT_RETURNTRANSFER, TRUE);
      $response_xml = curl_exec($c);
      curl_close($c);
      // XML parsing.
      $xml = simplexml_load_string($response_xml);
      foreach ($xml->monitor as $monitor) {
        \Drupal::configFactory()->getEditable('config.admin_config_uptime_widget')
            ->set('ratio', (string) $monitor['alltimeuptimeratio'])
            ->save();
      }
      // Leave a message in the log.
      $text = 'Uptime ratio updated successfully and reported to be ' . $config->get('ratio') . ' %.';
      \Drupal::logger('uptime_widget')->notice($text);
    }
    // Set the next time this hook_cron should be invoked.
    \Drupal::configFactory()->getEditable('config.admin_config_uptime_widget')
        ->set('next_execution', time() + $interval)
        ->save();
  }
}

/**
 * Implements hook_theme().
 */
function uptime_widget_theme($existing, $type, $theme, $path) {

  return array(
    'uptime_widget_block' => array(
      'variables' => array('gopi' => NULL),
    ),
  );
}

/**
 * Prepares variables for uptime widget block template.
 *
 * Default template: uptime-widget-block.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 */
function template_preprocess_uptime_widget_block(&$variables) {
  $config = \Drupal::config('config.admin_config_uptime_widget');
  $variables['enabled'] = $config->get('enabled');
  $variables['ratio'] = $config->get('ratio');
  $variables['notice_enabled'] = $config->get('notice_enabled');
  $variables['host'] = $config->get('url_name');
  $year = $config->get('year');
  $variables['notice'] = ' ' . $config->get('prepend') . ' Â© ' . (($year != date('Y') && !empty($year)) ? $year . '-' . date('Y') : date('Y'));
}
