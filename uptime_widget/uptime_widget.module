<?php

/**
 * @file
 * A configurable module defined block.
 */

use Drupal\Core\Template\Attribute;

/**
 * Implements hook_menu().
 */
function uptime_widget_menu() {
  $items['admin/config/system/uptime_widget'] = array(
    'title' => 'Uptime',
    'description' => 'UptimeRobot.com API key and monitor ID settings.',
    'route_name' => 'uptime_widget_settings',
    'access arguments' => array('administer site configuration'),
    'weight' => 100,
  );

  return $items;
}

/**
 * Implements hook_cron().
 *
 * Called every time the Drupal cron runs. Grabs the all-time uptime ratio from
 * UptimeRobot.com to store in the variable 'ratio' till next cron run.
 */
function uptime_widget_cron() {
  $interval = Drupal::config('uptime_widget.settings')->get('interval');
  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.
  if (time() >= Drupal::config('uptime_widget.settings')->get('next_execution')) {
    $api_key = Drupal::config('uptime_widget.settings')->get('api_key');
    $monitor_id  = Drupal::config('uptime_widget.settings')->get('monitor_id');
    // Pause or activate update monitoring depending on the 'enabled' checkbox.
    $status = Drupal::config('uptime_widget.settings')->get('enabled');
    $url_status    = "http://api.uptimerobot.com/editMonitor?apiKey=" . $api_key . "&monitorID=" . $monitor_id . "&monitorStatus=" . $status . "&format=xml";
    // Create a new cURL resource.
    $ch = curl_init();
    // Set URL and other appropriate options.
    curl_setopt($ch, CURLOPT_URL, $url_status);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    // Grab URL and pass it to the browser.
    curl_exec($ch);
    // Close cURL resource, and free up system resources.
    curl_close($ch);

    // Refresh the uptime ratio.
    $api_key = Drupal::config('uptime_widget.settings')->get('api_key');
    if (empty($api_key)) {
      Drupal::config('uptime_widget.settings')->set('ratio', '[Missing API key] ');
    }
    else {
      $monitor_id  = Drupal::config('uptime_widget.settings')->get('monitor_id');
      $url = "http://api.uptimerobot.com/getMonitors?apiKey=" . $api_key . "&monitors=" . $monitor_id . "&format=xml";
      // Curl request.
      $c = curl_init($url);
      curl_setopt($c, CURLOPT_RETURNTRANSFER, TRUE);
      $response_xml = curl_exec($c);
      curl_close($c);
      // XML parsing.
      $xml = simplexml_load_string($response_xml);
      foreach ($xml->monitor as $monitor) {
        Drupal::config('uptime_widget.settings')->set('ratio', (string) $monitor['alltimeuptimeratio']);
      }
      // Leave a message in the log.
      $text = 'Uptime ratio updated successfully and reported to be '. Drupal::config('uptime_widget.settings')->get('ratio') . ' %.';
      watchdog('uptime_widget', $text);
    }
    // Set the next time this hook_cron should be invoked.
    Drupal::config('uptime_widget.settings')->set('next_execution', time() + $interval);
  }
}

/**
 * Implements hook_theme().
 */
function uptime_widget_theme() {
  return array(
    'uptime_widget_fancy_block' => array(
      'template' => 'uptime-widget-fancy-block'
    ),
  );
}

/**
 * Prepares variables for test block templates.
 *
 * Default template: uptime-widget-fancy-block.html.twig.
 *
 * All non-renderable elements are removed so that the template has full access
 * to the structured data but can also simply iterate over all elements and
 * render them (as in the default template).
 *
 * @param array $variables
 *   An associative array containing the following key:
 */
function template_preprocess_uptime_widget_fancy_block(&$variables) {
  drupal_add_css(drupal_get_path('module', 'uptime_widget') . '/css/uptime.css', array('group' => CSS_AGGREGATE_DEFAULT, 'every_page' => TRUE));
  $variables['enabled'] = Drupal::config('uptime_widget.settings')->get('enabled');
  $variables['ratio'] = Drupal::config('uptime_widget.settings')->get('ratio');
  $variables['notice_enabled'] = Drupal::config('uptime_widget.settings')->get('notice_enabled');
  $variables['host'] = Drupal::config('uptime_widget.settings')->get('url_name');
  $year = Drupal::config('uptime_widget.settings')->get('year');
  $variables['notice'] = ' ' . Drupal::config('uptime_widget.settings')->get('prepend') . ' Â© ' . (($year != date('Y') && !empty($year)) ? $year . '-' . date('Y') : date('Y'));
}

